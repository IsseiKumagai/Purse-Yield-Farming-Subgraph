type UserActions @entity {
  id: ID! # EOA of all the user actions
  userDeposits: [UserDeposit!]! #@derivedFrom(field: "userActions") #@derivedFrom(field: "userActions")
  userWithdraws: [UserWithdraw!]! #@derivedFrom(field: "userActions")
  userAddNewPools: [UserAddNewPool!]! #@derivedFrom(field: "userActions")
  userUpdatePoolRewards: [UserUpdatePoolReward!]!
  #@derivedFrom(field: "userActions")
  userUpdatePoolMultipliers: [UserUpdatePoolMultiplier!]!
  #@derivedFrom(field: "userActions")
  userClaimRewards: [UserClaimReward!]! #@derivedFrom(field: "userActions")
  userEmergencyWithdraws: [UserEmergencyWithdraw!]!
  #@derivedFrom(field: "userActions")
}

type UserDeposit @entity {
  id: ID! # transaction hash + "-" + index in userDeposits UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  #lpTokenPoolAddress: Bytes!
  amountDeposit: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserWithdraw @entity {
  id: ID! # transaction hash + "-" + index in userWithdraws UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  #lpTokenPoolAddress: Bytes!
  amountWithdraw: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserAddNewPool @entity {
  id: ID! # transaction hash + "-" + index in userAddNewPools UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  lpTokenPoolAddress: Bytes!
  amountTokenPerBlock: BigInt!
  numberBonusMultiplier: BigInt!
  numberStartBlock: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserUpdatePoolReward @entity {
  id: ID! # transaction hash + "-" + index in userUpdatePoolRewards UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  lpTokenPoolAddress: Bytes!
  amountTokenPerBlock: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserUpdatePoolMultiplier @entity {
  id: ID! # transaction hash + "-" + index in userUpdatePoolMultipliers UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  lpTokenPoolAddress: Bytes!
  numberBonusMultiplier: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserClaimReward @entity {
  id: ID! # transaction hash + "-" + index in userClaimRewards UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  pendingAmount: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type UserEmergencyWithdraw @entity {
  id: ID! # transaction hash + "-" + index in userEmergencyWithdraws UserActions array
  sender: Bytes! # owner of the caller
  from: Bytes! # EOA that initiated the transaction
  lpTokenPoolAddress: Bytes!
  totalAmountWithdraw: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}
